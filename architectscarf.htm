<html>
<head>
<title>Architect Scarf Estimates</title>
<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>

<style type="text/css">
body {
  padding: 20px;
  font-family: sans-serif;
  background-color: #ccc;
}

.box {
  width: 300px;
  margin: 0 auto;
  position: relative;
}

.cover {
  width: 0; 
  height: 0; 
  border-top: 400px solid #ccc;
  border-left: 400px solid transparent;
  border-right: 400px solid transparent;
  position: absolute;
  right: -400px;
}

.stats,
.directions {
  margin: 20px auto;
  background-color: #fff;
  min-height: 50px;
  padding: 10px;
  white-space: pre-line;
}

.eye {
  background-image: url('eye.png');
  background-size: 125px;
}

.lac {
  background-image: url('lace.png');
  background-size: 150px;
}

.rib {
  background-image: url('line.png');
  background-size: 600px;
}

.lin {
  background-image: url('line.png');
  background-size: 250px;
}
</style>
</head>

<body>

<h1>Architect Scarf</h1>
<div id="triangles"></div>


<script type="text/javascript">

var mustard = "#b93";
var wine = "#626";

function drawTriangle(stripes) {
  $("#triangles").append("<div class='box'></div>");
  $(".box").append("<div class='cover'></div>");
  $(".box").append("<div class='stripes'></div>");
  $(".box").append("<div class='stats'></div>");

  var stripesEl = $(".stripes");
  var a = 0;
  $.each(stripes, function(index, value) {
    var el = document.createElement("div");
    el.style.backgroundColor = value[2];
    el.style.height = (value[0] * 1.5) + "px";
    el.style.width = "100%";
    el.className = value[1];
    a = a + parseInt(value[0]);
    stripesEl.append(el);
  });

  // Resize elements based on number of stripes
  var boxSize = a * 1.5;
  $(".box")
    .css("width", boxSize + "px");
  $(".cover")
    .css("border-top-width", boxSize + "px")
    .css("border-left-width", boxSize + "px")
    .css("border-right-width", boxSize + "px")
    .css("right", (-1 * boxSize) + "px");

    return a;
}



function doMath(a, stripes) {
  var areas = {};
  areas[wine] = 0;
  areas[mustard] = 0;
  var height = 0;
  var b = a;
  var c = 0;
  var area = 0;

  $.each(stripes, function(index, value) {  
    height = value[0];
    c = b - height;
    // console.log("a: " + a);
    // console.log("b: " + b);
    // console.log("c: " + c);
    
    area = 0.5 * ((b - c) * (2 * a - b - c));
    // console.log("area: " + area);

    areas[value[2]] += area;
    // console.log("area mustard: " + areas[mustard]);
    // console.log("area wine: " + areas[wine]);
    
    b -= height;
    c -= height;
  });

  // console.log(areas);
  // first section and fade of wine: 7.5g = 252 sq px = 0.02976
  // fade and first section of mustard: 11.5g = 630 sq px = 0.01825
  var gramsToPixels = 0.018;
  $(".stats").text(
    `Mustard: 
    - ${areas[mustard].toLocaleString('en-US')} pixels²
    - ${(areas[mustard] * gramsToPixels).toFixed(0)} grams
    - ${(areas[mustard] * gramsToPixels / 437 * 100).toFixed(1)}% of 437g

    Wine:  
    - ${areas[wine].toLocaleString('en-US')} pixels²
    - ${(areas[wine] * gramsToPixels).toFixed(0)} grams
    - ${(areas[wine] * gramsToPixels / 656 * 100).toFixed(1)}% of 656g
    `
  );
}

function writeDirections(stripes) {
  $(".box").append("<div class='directions'></div>")
  let directions = `<h2>Architect Scarf Instructions</h2>

    Cast on: cast on 6 stitches
    Setup row: knit to end

    Continue in pattern:
    RS (odd) rows: use color specified below; k1, YO, k2tog, k to last 2 sts, kfbf, drop YO from previous row, k1 (1 st inc)
    WS (even) rows: use color from previous row; k across

    Optional lace sections (mustard).
    –  Row 1: k1, *yo, sl1 k2, psso2*, repeat from * to * as necessary, knit 2 last stitches.
    –  Row 2: Purl across
    –  Row 3: *yo, sl1 k2, psso2*, repeat from * to *  to end.
    –  Row 4: Purl across
  `;
  let lastRow = 1;
  let rows, color;
  let wasLastRowFade = false;

  $.each(stripes, function(index, value) {
    rows = value[0] * 2;
    color = value[2];
    if (rows > 4) {
      directions += `
        Rows ${lastRow} to ${lastRow + rows - 1}: ${(color == mustard ? "mustard" : "wine")} (${rows} rows, ${rows / 2} RS rows)`;
      wasLastRowFade = false;
    } else  {
      if (!wasLastRowFade) {
        directions += `
          Fade by ${rows} for a while`;
      } else {
        directions += `.`;
      }
      wasLastRowFade = true;
    }

    lastRow = lastRow + rows;
  });

  $(".directions").html(directions);
}

var stripes = [
  // 1/2 eyelets
  [70, 'eye', mustard],
  // 3 garter
  [4,  'gar', wine],
  // 4 stripe ribbing
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  // 5 garter & eyelets 
  [4,  'gar', wine],
  // [8,  'eye', mustard],
  // 6 eyelets
  // [28, 'eye', mustard],
  [4,  'gar', mustard],
  [40, 'eye', wine], // new
  [4,  'gar', mustard],
  // 7 = 3 
  [4, 'gar', wine],
  // 8 = 4
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  // 9 = 5
  [4,  'gar', wine],
  [8,  'eye', mustard],
  // 10 = 6
  [28, 'eye', mustard],
  // 11 = 3 
  [4,  'gar', wine],
  // 12 twisted
  [12, 'lin', mustard],
  // 13 = 3 
  [6,  'gar', wine],
  // 14 ribbing and band
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [6,  'gar', wine],
  // 15 = 12
  [12, 'lin', mustard],
  // 16 = 3 
  [4,  'gar', wine],
  // 17 garter
  [4,  'gar', mustard],
  // 18
  [40, 'lac', wine],
  // 19
  [4,  'lin', mustard],
  [4,  'lin', wine],
  // 20 ribbing and garter edge
  [8,  'rib', mustard],
  [8,  'gar', wine],
];

var blendyStripes = [
  // 1/2 eyelets
  [70, 'eye', wine],
  // 3 garter
  [4,  'gar', mustard],
  // 4 stripe ribbing
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  // 5 garter & eyelets 
  [4,  'gar', mustard],
  [8,  'eye', wine],
  // 6 eyelets
  [28, 'eye', wine],
  // 7 = 3 
  [4, 'gar', mustard],
  // 8 = 4
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  [2, 'rib', wine],
  [2, 'rib', mustard],
  // 9 = 5
  [4,  'gar', mustard],
  [8,  'eye', wine],
  // 10 = 6
  [28, 'eye', wine],
  // 11 = 3 
  [4,  'gar', mustard],
  // 12 twisted
  [12, 'lin', wine],
  // 13 = 3 
  [6,  'gar', mustard],
  // 14 ribbing and band
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [2,  'rib', mustard],
  [2,  'rib', wine],
  [6,  'gar', mustard],
  // 15 = 12
  [12, 'lin', wine],
  // 16 = 3 
  [4,  'gar', mustard],
  // 17 garter
  [4,  'gar', wine],
  // 18
  [40, 'lac', mustard],
  // 19
  [4,  'lin', wine],
  [4,  'lin', mustard],
  // 20 ribbing and garter edge
  [8,  'rib', wine],
  [8,  'gar', mustard],
];


var totalHeight = drawTriangle(blendyStripes);
doMath(totalHeight, blendyStripes);
writeDirections(blendyStripes);
</script>

</body>
